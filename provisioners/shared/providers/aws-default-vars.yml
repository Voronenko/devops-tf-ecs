
# options
option_use_auto_scaling_group: true
option_use_yml_config: false  # set true for coreos - causes /etc/ecs/ecs.config creation
option_use_manual_cluster_instances: false
network_options_no_private: true

# /options

readable_env_name: "ecs-default"

ecsServiceRole_arn: "arn:aws:iam::672574731473:role/ecs_service_role_default"
ecsInstanceRole_arn: "arn:aws:iam::672574731473:role/ecs_instance_role_default"

aws_region: "eu-west-1"

aws_vpc_id: vpc-07ac6c1d389409bdc

aws_vpc_pubsubnet1: subnet-0e128b4e7a4c40966
aws_vpc_pubsubnet2: subnet-0b61150495b8ccacb
aws_vpc_privsubnet1: subnet-04994f0693f484bd5
aws_vpc_privsubnet2: subnet-0d74b9a55e0bf7ace

aws_sg_elb: sg-08a5676194d1b4c70
aws_sg_cluster: sg-0db968644a79231bd
aws_sg_datalayer: sg-07dd2518810ace8d1
aws_sg_bastion: sg-0fcec89b473c47ea2

aws_app_loadbalancer: "ecs-default"

vpc_availability_zone_t1: "eu-west-1a"
vpc_availability_zone_t2: "eu-west-1b"

aws_primary_route_table: rtb-0c09130b6a0ac7be0
aws_igw: igw-00da79dacc2efe26c

default_autoscaling_min_size: 1
default_autoscaling_desired_capacity: 1
default_autoscaling_max_size: 4


ec2_key: "voronenko_info"

ecs_cluster_name: "ecs-default" # ALLOWED TO BE SET EXTERNALLY
# ecs_engine_auth_data_token: "SPECIFY"  # todo: SET IT FROM SECURE VARS , cat ~/.docker/config.json
# ecs_engine_auth_data_email: "SPECIFY"  # todo:  SET IT FROM SECURE VARS




